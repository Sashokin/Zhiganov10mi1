# -*- coding: utf-8 -*-
import telebot
from telebot import types
import my_markups
import config_for_token
from peewee import *
import dbhelp
import time
#todo: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–µ–¥–≤–µ–¥–µ–π –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ+–∫–æ–ª-–≤–æ, –¥–æ–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —É–±—Ä–∞—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤(–¥–æ–¥–µ–ª–∞—Ç—å), –≤–≤–µ—Å—Ç–∏ –∏–º—è - –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞

bot = telebot.TeleBot(config_for_token.token) #—Ç–æ–∫–µ–Ω —Å–ø—Ä—è—Ç–∞–Ω, —Ç–∫ –º–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ –ø—É–±–ª–∏—á–Ω—ã–π


#db = SqliteDatabase('database.db')


@bot.message_handler(commands=['start'])
def send_welcome(message):
    ccid = message.chat.id
    cb = 0
    for u in dbhelp.User.select():
        if str(u.cid) == str(ccid):
            cb = 1
    if cb == 0:
        ccid = dbhelp.User(cid=ccid, type='0', name='none', phone='none', uvedl='1', orders='', sendmes='0', bin='none', total='0', kolvo='0', tov='')
        ccid.save()
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç![üòä](https://i.imgur.com/mPMdr9B.jpg)'
                                          ' –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ metoyou! –ê —Ç–µ–±—è —è –µ—â–µ –Ω–µ –∑–Ω–∞—éüòî', parse_mode='markdown', reply_markup=my_markups.start_page)
    else:
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                if u.name == 'none':
                    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!üòä –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ metoyou! –ê —Ç–µ–±—è —è –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –∑–Ω–∞—éüòî', reply_markup=my_markups.start_page)
                else:
                    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {} üòä'.format(u.name), reply_markup=my_markups.main_menu)


@bot.message_handler(commands=['help'])
def send_help(message):
    comtxt = open('commands.txt', encoding='utf-8')
    bot.send_message(message.chat.id, 'üìå–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n{}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏'.format(comtxt.read()), reply_markup=my_markups.help_page)


@bot.message_handler(commands=['main'])
def main_menu(message):
    bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=my_markups.main_menu)


@bot.message_handler(commands=['buy'])
def buy_com(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—Éüòä', reply_markup=my_markups.menu_page)


@bot.message_handler(commands=['bin'])
def bin_com(message):
    ccid = message.chat.id
    for u in dbhelp.User.select():
        if str(u.cid) == str(ccid):
            if u.bin == 'none':
                bot.send_message(message.chat.id, 'üõí–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', reply_markup=my_markups.bin_page)
            else:
                bot.send_message(message.chat.id, 'üõí–¢–æ–≤–∞—Ä—ã –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:')
                u.bin = u.bin.split()
                n = len(u.bin)
                for i in range(n):
                    u.bin[i] = int(u.bin[i])
                for i in range(n):
                    for p in dbhelp.Product.select():
                        mark = types.InlineKeyboardMarkup()
                        mkbtt = types.InlineKeyboardButton(text='‚ùå–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='del_{}'.format(p.id))
                        mark.add(mkbtt)
                        if str(u.bin[i]) == str(p.id):
                            bot.send_message(message.chat.id,
                                             '[üêª]({}){}, {} —Å–º., {} —Ä—É–±–ª–µ–π'.format(p.link, p.name, p.size, p.price),
                                             parse_mode='markdown', reply_markup=mark)
                bot.send_message(message.chat.id, '–û–±—â–∞—è —Å—É–º–º–∞: {} —Ä—É–±–ª–µ–π \n–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?'.format(u.total),
                                 reply_markup=my_markups.order_page)


@bot.message_handler(commands=['personal'])
def personal_com(message):
    bot.send_message(message.chat.id, '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', reply_markup=my_markups.personal_page)


@bot.callback_query_handler(func=lambda call: True)
def add_to_bin(call):
    if call.message:
        new_order = ''
        new_total = 0
        kolvo = 0
        del_order = ''
        if call.data == 'none':
            bot.send_message(call.message.chat.id, '–î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ')
        elif call.data == 'uvedl_on':
            for u in dbhelp.User.select():
                if str(u.cid) == str(call.message.chat.id):
                    u.uvedl = '1'
                    u.save()
                    bot.send_message(call.message.chat.id, '‚úÖ–ì–æ—Ç–æ–≤–æ')
        elif call.data == 'uvedl_off':
            for u in dbhelp.User.select():
                if str(u.cid) == str(call.message.chat.id):
                    u.uvedl = '0'
                    u.save()
                    bot.send_message(call.message.chat.id, '‚úÖ–ì–æ—Ç–æ–≤–æ')
        elif call.data[:4] == 'del_':
            for p in dbhelp.Product.select():
                if int(call.data[4:]) == int(p.id):
                    del_order = p.id
                    new_total = int(p.price)
            for u in dbhelp.User.select():
                if str(u.cid) == str(call.message.chat.id):
                    new_bin = u.bin
                    new_bin = new_bin.split(str(del_order))[0] + str(del_order).join(new_bin.split(str(del_order))[1:])
                    if u.bin == new_bin:
                        bot.send_message(call.message.chat.id, 'üõç–≠—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —É–∂–µ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ')
                    else:
                        u.bin = new_bin
                        a = int(u.total)
                        new_total = a-new_total
                        kolvo = int(u.kolvo)
                        kolvo -= 1
                        u.total = str(new_total)
                        u.kolvo = str(kolvo)
                        u.save()
                        bot.send_message(call.message.chat.id, 'üõç–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
                    for i in range(10):
                        if u.bin == ' '*i:
                            u.bin = 'none'
                            u.save()
        else:
            for p in dbhelp.Product.select():
                if call.data == p.theme:
                    new_order = p.id
                    new_total = int(p.price)
            for u in dbhelp.User.select():
                if str(u.cid) == str(call.message.chat.id):
                    if u.bin == 'none':
                        u.bin = str(new_order) + ' '
                        a = int(u.total)
                        new_total +=a
                        u.total = str(new_total)
                        kolvo = int(u.kolvo)
                        kolvo += 1
                        u.kolvo = str(kolvo)
                        u.save()
                    else:
                        u.bin += str(new_order) + ' '
                        a = int(u.total)
                        new_total += a
                        u.total = str(new_total)
                        u.total = str(new_total)
                        kolvo = int(u.kolvo)
                        kolvo += 1
                        u.kolvo = str(kolvo)
                        u.save()
            bot.send_message(call.message.chat.id, 'üõç–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')


@bot.message_handler(content_types=['contact'])
def main1(message):
    ccid = message.chat.id
    enter_phone = 0
    for u in dbhelp.User.select():
        if str(u.cid) == str(ccid):
            if u.sendmes == '2':
                enter_phone = 1
    if enter_phone == 1:
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.phone = message.contact.phone_number
                u.sendmes = '0'
                u.save()
                abfc = int(u.kolvo)%10
                if abfc == 0 or abfc == 5 or abfc == 6 or abfc == 7 or abfc == 8 or abfc == 9:
                    u.tov = '—Ç–æ–≤–∞—Ä–æ–≤'
                elif abfc == 1:
                    u.tov = '—Ç–æ–≤–∞—Ä'
                elif abfc == 2 or abfc == 3 or abfc == 4:
                    u.tov = '—Ç–æ–≤–∞—Ä–∞'
                bot.send_message(message.chat.id, '‚úÖ–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {} —Ä—É–±–ª–µ–π + –¥–æ—Å—Ç–∞–≤–∫–∞ 300 —Ä—É–±–ª–µ–π.\n{} {}.\n–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É({}) –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.'.format(u.total, u.kolvo, u.tov, u.phone), reply_markup=my_markups.confirm_page)


@bot.message_handler(content_types=['text'])
def main(message):
    ccid = message.chat.id
    enter_name = 0
    enter_mes = 0
    for u in dbhelp.User.select():
        if str(u.cid) == str(ccid):
            if u.type == '1':
                enter_name = 1
            if u.sendmes == '1':
                enter_mes = 1
    if message.text == '‚ùå–û—Ç–º–µ–Ω–∞':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.type = '0'
                u.save()
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –≤–µ—Ä–Ω–µ–º—Å—è –∫ —ç—Ç–æ–º—É –ø–æ–∑–∂–µ', reply_markup=my_markups.main_menu)
    elif message.text == '‚ùå–û—Ç–º–µ–Ω–∏—Ç—å':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.sendmes = '0'
                u.save()
        comtxt = open('commands.txt', encoding='utf-8')
        bot.send_message(message.chat.id, 'üìå–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n{}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏'.format(comtxt.read()), reply_markup=my_markups.help_page)
    elif enter_name == 1:
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.name = message.text
                u.type = '2'
                bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, {}, —è –∑–∞–ø–æ–º–Ω–∏–ªüòä'.format(u.name), reply_markup=my_markups.main_menu)
                u.save()
    elif enter_mes == 1:
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                bot.send_message(680180012, '{}(@{} / @{}) –æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: \n{}'.format(u.name, message.from_user.username, message.chat.username, message.text))
                u.sendmes = '0'
                u.save()
                bot.send_message(message.chat.id, '‚å®Ô∏è–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', reply_markup=my_markups.help_page)
    elif message.text == 'üö™–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or message.text == 'üö™–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=my_markups.main_menu)
    elif message.text == '‚ùì–ü–æ–º–æ—â—å –∏ —Å–≤—è–∑—å' or message.text == '‚ùì–ü–æ–º–æ—â—å':
        comtxt = open('commands.txt', encoding='utf-8')
        bot.send_message(message.chat.id, 'üìå–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n{}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏'.format(comtxt.read()), reply_markup=my_markups.help_page)
    elif message.text == 'üìã–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ':
        bot.send_message(message.chat.id, '–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏', reply_markup=my_markups.to_site)
        bot.send_message(message.chat.id, '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏', reply_markup=my_markups.help_page)
    elif message.text == '‚å®Ô∏è–ù–∞–ø–∏—Å–∞—Ç—å':
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–æ —Å—Ä–∞–∑—É –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞–º', reply_markup=my_markups.enter_page2)
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.sendmes = '1'
                u.save()
    elif message.text == 'üë§–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ':
        bot.send_message(message.chat.id, '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', reply_markup=my_markups.personal_page)
    elif message.text == 'üîè–í–≤–µ—Å—Ç–∏ –∏–º—è':
        bot.send_message(message.chat.id, '–Ø –∑–∞–ø–æ–º–Ω—é –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è', reply_markup=my_markups.enter_page)
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.type = '1'
                u.save()
    elif message.text == 'üêª–ú–∏—à–∫–∏':
        bot.send_message(message.chat.id, '–ü–æ –∫–∞–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–≤–µ–¥–µ–π?', reply_markup=my_markups.sort_page)
    elif message.text == 'üìè–ü–æ —Ä–∞–∑–º–µ—Ä—É':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∏—à–∫–∏', reply_markup=my_markups.medved_page)
    elif message.text == 'üõí–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—Éüòä', reply_markup=my_markups.menu_page)
    elif message.text == 'üîÆ–†–∞–∑–Ω–æ–µ':
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏üòî', reply_markup=my_markups.no_goods_page)
    elif message.text == 'üè∑–ò–º—è':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                bot.send_message(message.chat.id, '–¢–µ–∫—É—â–µ–µ –∏–º—è: {} \n–ò–∑–º–µ–Ω–∏—Ç—å?'.format(u.name), reply_markup=my_markups.start_page)
    elif message.text == 'üõé–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        a = ''
        mk1 = types.InlineKeyboardMarkup()
        mk2 = types.InlineKeyboardMarkup()
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                if u.uvedl == '1':
                    mkb = types.InlineKeyboardButton(text='‚ùå–í—ã–∫–ª—é—á–∏—Ç—å', callback_data='uvedl_off')
                    mk1.add(mkb)
                    bot.send_message(message.chat.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, –≤—ã–∫–ª—é—á–∏—Ç—å?', reply_markup=mk1)
                elif u.uvedl == '0':
                    mkb = types.InlineKeyboardButton(text='‚úÖ–í–∫–ª—é—á–∏—Ç—å', callback_data='uvedl_on')
                    mk2.add(mkb)
                    bot.send_message(message.chat.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã, –≤–∫–ª—é—á–∏—Ç—å?', reply_markup=mk2)
    elif message.text == 'üõí–ö–æ—Ä–∑–∏–Ω–∞':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                if u.bin == 'none':
                    bot.send_message(message.chat.id, 'üõí–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', reply_markup=my_markups.bin_page)
                else:
                    bot.send_message(message.chat.id, 'üõí–¢–æ–≤–∞—Ä—ã –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:')
                    u.bin = u.bin.split()
                    n = len(u.bin)
                    for i in range(n):
                        u.bin[i] = int(u.bin[i])
                    for i in range(n):
                        for p in dbhelp.Product.select():
                            mark = types.InlineKeyboardMarkup()
                            mkbtt = types.InlineKeyboardButton(text='‚ùå–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='del_{}'.format(p.id))
                            mark.add(mkbtt)
                            if str(u.bin[i]) == str(p.id):
                                bot.send_message(message.chat.id, '[üêª]({}){}, {} —Å–º., {} —Ä—É–±–ª–µ–π'.format(p.link, p.name, p.size, p.price), parse_mode='markdown', reply_markup=mark)
                    bot.send_message(message.chat.id, '–û–±—â–∞—è —Å—É–º–º–∞: {} —Ä—É–±–ª–µ–π \n–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?'.format(u.total), reply_markup=my_markups.order_page)
    elif message.text == 'üóë–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.bin = 'none'
                u.total = '0'
                u.save()
                bot.send_message(message.chat.id, 'üóë–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', reply_markup=my_markups.bin_page)
    elif message.text == 'üéà–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π':
        for p in dbhelp.Product.select():
            if p.type == '1' and p.sale != '0' and p.available != '0':
                bot.send_message(message.chat.id, '[üêª]({}){}, {} —Å–º., {} —Ä—É–±–ª–µ–π —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏'.format(p.link, p.name, p.size, p.price), parse_mode='markdown', reply_markup=check_available(p.available, p.theme))
    elif message.text == 'üêª10-18 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤üêª':
        show_product('1', '1', message)
    elif message.text == 'üêª20 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤üêª':
        show_product('1', '2', message)
    elif message.text == 'üêª23-25 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤üêª':
        show_product('1', '3', message)
    elif message.text == 'üêª30 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤üêª':
        show_product('1', '4', message)
    elif message.text == 'üêª40-50 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤üêª':
        show_product('1', '5', message)
    elif message.text == 'üéâ–ü–æ —Ç–µ–º–∞—Ç–∏–∫–µ':
        bot.send_message(message.chat.id, '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüòî')
    elif message.text == 'üéÅ–ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏':
        for p in dbhelp.Product.select():
            if p.type == '2' and p.available != '0':
                bot.send_message(message.chat.id, '[üéÅ]({}){} {} —Å–º., {} —Ä—É–±–ª–µ–π '.format(p.link, p.name, p.size, p.price), parse_mode='markdown', reply_markup=check_available(p.available, p.theme))
    elif message.text == 'üì¶–ó–∞–∫–∞–∑—ã':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.orders = u.orders.split()
                n = len(u.orders)
                for i in range(n):
                    u.orders[i] = int(u.orders[i])
                for i in range(n):
                    for o in dbhelp.Order.select():
                        if str(u.orders[i]) == str(o.id):
                                o.bin = o.bin.split()
                                s = len(o.bin)
                                for abc in range(s):
                                    o.bin[abc] = int(o.bin[abc])
                                for abcd in range(s):
                                    for p in dbhelp.Product.select():
                                        if str(o.bin[abcd]) == str(p.id):
                                            bot.send_message(message.chat.id, '[üêª]({}){}, {} —Å–º., {} —Ä—É–±–ª–µ–π'.format(p.link, p.name, p.size, p.price), parse_mode='markdown')
                                statusf = ''
                                if o.status == '0':
                                    statusf = '‚ö†Ô∏è–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
                                elif o.status == '1':
                                    statusf = '‚ùï–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è'
                                elif o.status == '2':
                                    statusf = '‚úÖ–ü–æ–ª—É—á–µ–Ω'
                                elif o.status == '3':
                                    statusf = '‚õîÔ∏è–û—Ç–º–µ–Ω–µ–Ω'
                                bot.send_message(message.chat.id, '–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {} —Ä—É–±–ª–µ–π\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {}'.format(o.total, statusf))
    elif message.text == 'üó≥–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                abfc = int(u.kolvo) % 10
                if abfc == 0 or abfc == 5 or abfc == 6 or abfc == 7 or abfc == 8 or abfc == 9:
                    u.tov = '—Ç–æ–≤–∞—Ä–æ–≤'
                elif abfc == 1:
                    u.tov = '—Ç–æ–≤–∞—Ä'
                elif abfc == 2 or abfc == 3 or abfc == 4:
                    u.tov = '—Ç–æ–≤–∞—Ä–∞'
                bot.send_message(message.chat.id, 'üì¶{} {} –Ω–∞ {} —Ä—É–±–ª–µ–π\n–î–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å 300 —Ä—É–±–ª–µ–π\n–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞, –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏'.format(u.kolvo, u.tov, u.total), reply_markup=my_markups.phone_page)
                u.sendmes = '2'
                u.save()
    elif message.text == '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                fs = 0
                for i in dbhelp.Order.select():
                    fs += 1
                fccid = ''
                fccid = str(ccid)+str(fs)
                fccid = dbhelp.Order.create(id=fs, user=str(ccid), phone=u.phone, bin=u.bin, total=str(int(u.total)+300), status='0')
                fccid.save()
                bot.send_message(680180012, '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n–°—É–º–º–∞: {}, —Ç–æ–≤–∞—Ä—ã: {}, —Ç–µ–ª–µ—Ñ–æ–Ω: {}'.format(str(int(u.total)+300), u.bin, u.phone), reply_markup=my_markups.main_menu)
                u.bin = 'none'
                u.total = '0'
                u.kolvo = '0'
                u.orders = str(u.orders) + str('{} '.format(fs))
                u.save()
                fs = 0
                f = ''
                bot.send_message(message.chat.id, '‚úÖ–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É', reply_markup=my_markups.main_menu)
    else:
        comtxt = open('commands.txt', encoding='utf-8')
        bot.send_message(message.chat.id, 'üòü–ù–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n{}\n\n'.format(comtxt.read()), reply_markup=my_markups.go_to_main_menu)


def check_available(a, b):
    mkup1 = types.InlineKeyboardMarkup()
    mkup2 = types.InlineKeyboardMarkup()
    mkbt1 = types.InlineKeyboardButton(text='‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=b)
    mkbt2 = types.InlineKeyboardButton(text='‚ùå–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏', callback_data='none')
    mkup1.add(mkbt1)
    mkup2.add(mkbt2)
    if a == '1':
        return mkup1
    else:
        return mkup2


def show_product(product_type, size_type, message):
    for p in dbhelp.Product.select():
        if p.type == product_type and p.size_type == size_type:
            bot.send_message(message.chat.id, '[üêª]({}){}, {} —Å–º., {} —Ä—É–±–ª–µ–π'.format(p.link, p.name, p.size, p.price), parse_mode='markdown', reply_markup=check_available(p.available, p.theme))


@bot.message_handler(content_types=['sticker', 'pinned_message', 'photo', 'audio', 'document'])
def answer_not_a_text(message):
    comtxt = open('commands.txt', encoding='utf-8')
    bot.send_message(message.chat.id, 'üòü–ù–µ –º–æ–≥—É –Ω–∏–∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n{}\n\n'.format(comtxt.read()), reply_markup=my_markups.go_to_main_menu)


if __name__ == '__main__':
    bot.polling(none_stop=True)
