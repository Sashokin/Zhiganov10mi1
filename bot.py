# -*- coding: utf-8 -*-
import telebot
from telebot import types
import my_markups
import config_for_token
import dbhelp
import time
import logging
# todo: faq

bot = telebot.TeleBot(config_for_token.token)  # —Ç–æ–∫–µ–Ω —Å–ø—Ä—è—Ç–∞–Ω, —Ç–∫ –º–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ –ø—É–±–ª–∏—á–Ω—ã–π


# db = SqliteDatabase('database.db')
# bot - @MeToYou_shop_bot


@bot.message_handler(commands=['start'])
def send_welcome(message):
    ccid = message.chat.id
    cb = 0
    for u in dbhelp.User.select():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if str(u.cid) == str(ccid):
            cb = 1
    if cb == 0:  # –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        ccid = dbhelp.User(cid=ccid, type='0', name='none', phone='none', uvedl='1', orders='', sendmes='0', bin='none', total='0', kolvo='0', tov='', doppredl='0', last_total='', product_show='0')
        ccid.save()
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç![üòä](https://i.imgur.com/mPMdr9B.jpg)'
                                          ' –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ metoyou!', parse_mode='markdown', reply_markup=my_markups.main_menu)
    else:  # –ò–ª–∏ –∂–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                if u.name == 'none':
                    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞!üòä', reply_markup=my_markups.main_menu)
                else:
                    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {} üòä'.format(u.name), reply_markup=my_markups.main_menu)


@bot.message_handler(commands=['help'])  # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ + —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–º–æ—â–∏
def send_help(message):
    comtxt = open('commands.txt', encoding='utf-8')
    bot.send_message(message.chat.id, 'üìå–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º:\n\n{}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏'.format(comtxt.read()), reply_markup=my_markups.help_page)


@bot.message_handler(commands=['main'])  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(message):
    bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=my_markups.main_menu)


@bot.message_handler(commands=['buy'])  # –í–∫–ª–∞–¥–∫–∞ –ø–æ–∫—É–ø–∫–∏
def buy_com(message):
    bot.send_message(message.chat.id, 'üõí–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É', reply_markup=my_markups.menu_page)


@bot.message_handler(commands=['bin'])  # –í–∫–ª–∞–¥–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
def bin_com(message):
    ccid = message.chat.id
    for u in dbhelp.User.select():
        if str(u.cid) == str(ccid):
            if u.bin == 'none':
                bot.send_message(message.chat.id, 'üõí–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', reply_markup=my_markups.bin_page)
            else:
                bot.send_message(message.chat.id, 'üõí–¢–æ–≤–∞—Ä—ã –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:', reply_markup=my_markups.order_page)
                u.bin = u.bin.split()
                n = len(u.bin)
                for i in range(n):
                    for p in dbhelp.Product.select():
                        mark = types.InlineKeyboardMarkup()
                        mkbtt = types.InlineKeyboardButton(text='‚ùå–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='del_{}'.format(p.id))
                        mark.add(mkbtt)
                        if str(u.bin[i]) == str(p.id):
                            bot.send_message(message.chat.id, '[üêª]({}){}, {} —Å–º., {} —Ä—É–±–ª–µ–π'.format(p.link, p.name, p.size, p.price), parse_mode='markdown', reply_markup=mark)
                bot.send_message(message.chat.id, '–û–±—â–∞—è —Å—É–º–º–∞: {} —Ä—É–±–ª–µ–π \n–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?'.format(u.total))
                save_last_total(message)


@bot.message_handler(commands=['personal'])  # –í–∫–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def personal_com(message):
    bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=my_markups.personal_page)


@bot.callback_query_handler(func=lambda call: True)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
def add_to_bin(call):
    if call.message:
        new_order = ''
        new_total = 0
        kolvo = 0
        del_order = ''
        mk = types.InlineKeyboardMarkup()
        if call.data == 'none':  # –ö–ª–∏–∫ –ø–æ —Ç–æ–≤–∞—Ä—É, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='‚ùå–î–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ')
        elif call.data == 'uvedl_on':  # –í–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            for u in dbhelp.User.select():
                if str(u.cid) == str(call.message.chat.id):
                    u.uvedl = '1'
                    u.save()
                    mkb = types.InlineKeyboardButton(text='‚ùå–í—ã–∫–ª—é—á–∏—Ç—å', callback_data='uvedl_off')
                    mk.add(mkb)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, –≤—ã–∫–ª—é—á–∏—Ç—å?', reply_markup=mk)
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='‚úÖ–ì–æ—Ç–æ–≤–æ')
        elif call.data == 'uvedl_off':  # –í—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            for u in dbhelp.User.select():
                if str(u.cid) == str(call.message.chat.id):
                    u.uvedl = '0'
                    u.save()
                    mkb = types.InlineKeyboardButton(text='‚úÖ–í–∫–ª—é—á–∏—Ç—å', callback_data='uvedl_on')
                    mk.add(mkb)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã, –≤–∫–ª—é—á–∏—Ç—å?', reply_markup=mk)
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='‚úÖ–ì–æ—Ç–æ–≤–æ')
        elif call.data == 'pr_show_on':  # –í–∫–ª—é—á–∏—Ç—å –ø–æ–∫–∞–∑ —Ç–æ–ª—å–∫–æ –∏–º–µ—é—â–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤
            for u in dbhelp.User.select():
                if str(u.cid) == str(call.message.chat.id):
                    u.product_show = '1'
                    u.save()
                    mkb = types.InlineKeyboardButton(text='üõç–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ', callback_data='pr_show_off')
                    mk.add(mkb)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã?', reply_markup=mk)
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='‚úÖ–ì–æ—Ç–æ–≤–æ')
        elif call.data == 'pr_show_off':  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            for u in dbhelp.User.select():
                if str(u.cid) == str(call.message.chat.id):
                    u.product_show = '0'
                    u.save()
                    mkb = types.InlineKeyboardButton(text='üõç–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –Ω–∞–ª–∏—á–∏–∏', callback_data='pr_show_on')
                    mk.add(mkb)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤—Å–µ —Ç–æ–≤–∞—Ä—ã. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏?', reply_markup=mk)
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='‚úÖ–ì–æ—Ç–æ–≤–æ')
        elif call.data[:4] == 'del_':  # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            for p in dbhelp.Product.select():
                if int(call.data[4:]) == int(p.id):
                    del_order = p.id
                    new_total = int(p.price)
            for u in dbhelp.User.select():
                if str(u.cid) == str(call.message.chat.id):
                    new_bin = u.bin
                    new_bin = new_bin.split(str(del_order))[0] + str(del_order).join(new_bin.split(str(del_order))[1:])
                    if u.bin == new_bin:
                        bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='üõç–≠—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —É–∂–µ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ')
                    else:
                        u.bin = new_bin
                        a = int(u.total)
                        new_total = a-new_total
                        kolvo = int(u.kolvo)
                        kolvo -= 1
                        u.total = str(new_total)
                        u.kolvo = str(kolvo)
                        u.save()
                        hggh = 'rep_'+call.data[4:]
                        mkb = types.InlineKeyboardButton(text='‚úÖ–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data=hggh)
                        mk.add(mkb)
                        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=mk)
                        bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='üõç–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
                        for i in range(10):
                            if u.bin == ' '*i:
                                u.bin = 'none'
                                u.save()
        elif call.data[:4] == 'rep_':  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            for p in dbhelp.Product.select():
                if int(call.data[4:]) == int(p.id):
                    new_order = p.id
                    new_total = int(p.price)
            for u in dbhelp.User.select():
                if str(u.cid) == str(call.message.chat.id):
                    if u.bin == 'none':
                        u.bin = str(new_order) + ' '
                        a = int(u.total)
                        new_total += a
                        u.total = str(new_total)
                        kolvo = int(u.kolvo)
                        kolvo += 1
                        u.kolvo = str(kolvo)
                        u.save()
                    else:
                        u.bin += str(new_order) + ' '
                        a = int(u.total)
                        new_total += a
                        u.total = str(new_total)
                        u.total = str(new_total)
                        kolvo = int(u.kolvo)
                        kolvo += 1
                        u.kolvo = str(kolvo)
                        u.save()
                    hggh = 'del_' + call.data[4:]
                    mkb = types.InlineKeyboardButton(text='‚ùå–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data=hggh)
                    mk.add(mkb)
                    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=mk)
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='üõç–¢–æ–≤–∞—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        elif call.data == 'go_to_bin':
            for u in dbhelp.User.select():
                if str(u.cid) == str(call.message.chat.id):
                    if u.bin == 'none':
                        bot.send_message(call.message.chat.id, 'üõí–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', reply_markup=my_markups.bin_page)
                    else:
                        bot.send_message(call.message.chat.id, 'üõí–¢–æ–≤–∞—Ä—ã –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:')
                        u.bin = u.bin.split()
                        n = len(u.bin)
                        for i in range(n):
                            for p in dbhelp.Product.select():
                                mark = types.InlineKeyboardMarkup()
                                mkbtt = types.InlineKeyboardButton(text='‚ùå–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='del_{}'.format(p.id))
                                mark.add(mkbtt)
                                if str(u.bin[i]) == str(p.id):
                                    bot.send_message(call.message.chat.id,
                                                     '[üêª]({}){}, {} —Å–º., {} —Ä—É–±–ª–µ–π'.format(p.link, p.name, p.size, p.price), parse_mode='markdown', reply_markup=mark)
                        bot.send_message(call.message.chat.id, '–û–±—â–∞—è —Å—É–º–º–∞: {} —Ä—É–±–ª–µ–π \n–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?'.format(u.total), reply_markup=my_markups.order_page)
        elif call.data == 'go_to_menu':
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='üì¶–£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')
            bot.send_message(call.message.chat.id, 'üõí–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä', reply_markup=my_markups.menu_page)
        elif call.data[:7] == 'or_del_':
            for o in dbhelp.Order.select():
                if int(call.data[7:]) == int(o.id):
                    o.status = '4'
                    o.save()
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='‚ùå–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏')
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='‚ùå–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏')
        elif call.data[:8] == 'or_canc_':
            for o in dbhelp.Order.select():
                if int(call.data[8:]) == int(o.id):
                    o.status = '3'
                    o.save()
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='‚ùå–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω')
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='‚ùå–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω')
        else:  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
            for p in dbhelp.Product.select():
                if call.data == p.theme:
                    new_order = p.id
                    new_total = int(p.price)
            for u in dbhelp.User.select():
                if str(u.cid) == str(call.message.chat.id):
                    if u.bin == 'none':
                        u.bin = str(new_order) + ' '
                        a = int(u.total)
                        new_total +=a
                        u.total = str(new_total)
                        kolvo = int(u.kolvo)
                        kolvo += 1
                        u.kolvo = str(kolvo)
                        u.save()
                    else:
                        u.bin += str(new_order) + ' '
                        a = int(u.total)
                        new_total += a
                        u.total = str(new_total)
                        u.total = str(new_total)
                        kolvo = int(u.kolvo)
                        kolvo += 1
                        u.kolvo = str(kolvo)
                        u.save()
                    mkb = types.InlineKeyboardButton(text='‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=call.data)
                    mkdk = types.InlineKeyboardButton(text='üõí–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É ({})'.format(u.kolvo), callback_data='go_to_bin')
                    mk.add(mkb)
                    mk.add(mkdk)
                    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=mk)
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='üõç–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')


@bot.message_handler(content_types=['contact'])  # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
def contact(message):
    ccid = message.chat.id
    enter_phone = 0
    for u in dbhelp.User.select():
        if str(u.cid) == str(ccid):
            if u.sendmes == '2':
                enter_phone = 1
    if enter_phone == 1:
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.phone = message.contact.phone_number
                u.sendmes = '0'
                u.save()
                abfc = int(u.kolvo) % 10
                if abfc == 0 or abfc == 5 or abfc == 6 or abfc == 7 or abfc == 8 or abfc == 9:
                    u.tov = '—Ç–æ–≤–∞—Ä–æ–≤'
                elif abfc == 1:
                    u.tov = '—Ç–æ–≤–∞—Ä'
                elif abfc == 2 or abfc == 3 or abfc == 4:
                    u.tov = '—Ç–æ–≤–∞—Ä–∞'
                bot.send_message(message.chat.id, '‚úÖ–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {} —Ä—É–±–ª–µ–π.\n{} {}.\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É({}) –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.'.format(u.total, u.kolvo, u.tov, u.phone), reply_markup=my_markups.confirm_page)


def confirm_phone(ccid, message):
    for u in dbhelp.User.select():
        if str(u.cid) == str(ccid):
            u.sendmes = '0'
            u.save()
            abfc = int(u.kolvo) % 10
            if abfc == 0 or abfc == 5 or abfc == 6 or abfc == 7 or abfc == 8 or abfc == 9:
                u.tov = '—Ç–æ–≤–∞—Ä–æ–≤'
            elif abfc == 1:
                u.tov = '—Ç–æ–≤–∞—Ä'
            elif abfc == 2 or abfc == 3 or abfc == 4:
                u.tov = '—Ç–æ–≤–∞—Ä–∞'
            bot.send_message(message.chat.id, '‚úÖ–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {} —Ä—É–±–ª–µ–π.\n{} {}.\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É({}) –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.'.format(u.total, u.kolvo, u.tov, u.phone), reply_markup=my_markups.confirm_page)


@bot.message_handler(content_types=['text'])  # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
def main(message):
    ccid = message.chat.id
    enter_mes = 0
    for u in dbhelp.User.select():
        if str(u.cid) == str(ccid):
            if u.sendmes == '1':
                enter_mes = 1
            if u.sendmes == '2':
                enter_mes = 2
            if u.sendmes == '3':
                enter_mes = 3
    if message.text == '‚ùå–û—Ç–º–µ–Ω–∞':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.type = '0'
                u.save()
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –≤–µ—Ä–Ω–µ–º—Å—è –∫ —ç—Ç–æ–º—É –ø–æ–∑–∂–µ', reply_markup=my_markups.main_menu)
    elif message.text == '‚ùå–û—Ç–º–µ–Ω–∏—Ç—å':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.sendmes = '0'
                u.save()
        comtxt = open('commands.txt', encoding='utf-8')
        bot.send_message(message.chat.id, 'üìå–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n{}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏'.format(comtxt.read()), reply_markup=my_markups.help_page)
    elif enter_mes == 3:
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.phone = message.text
                u.sendmes = '0'
                bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ªüòä', reply_markup=my_markups.personal_page)
                u.save()
    elif enter_mes == 1:
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                bot.send_message(680180012, '{}(@{} / @{}) –æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: \n{}'.format(u.name, message.from_user.username, message.chat.username, message.text))
                u.sendmes = '0'
                u.save()
                bot.send_message(message.chat.id, '‚å®Ô∏è–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', reply_markup=my_markups.help_page)
    elif message.text == 'üö™–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or message.text == 'üö™–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=my_markups.main_menu)
    elif message.text == '‚úÖ–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        confirm_phone(ccid, message)
    elif message.text == '‚ùì–ü–æ–º–æ—â—å –∏ —Å–≤—è–∑—å' or message.text == '‚ùì–ü–æ–º–æ—â—å':
        send_help(message)
    elif message.text == 'ü•á–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏':
        bot.send_message(message.chat.id, 'üëç–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–¥–∞–∂–µ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ Carte Blanche Greetings LTD \n–í—Å—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞ –ø—Ä–µ–¥–ø—Ä–æ–¥–∞–∂–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∏ —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é\n\n [–ö–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –æ—Ç –ø–æ–¥–¥–µ–ª–∫–∏](https://market.yandex.ru/journal/expertise/kak-otlichit-originalnogo-mishku-Me-to-You-ot-poddelki)', parse_mode='markdown')
    elif message.text == '‚å®Ô∏è–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–æ —Å—Ä–∞–∑—É –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞–º', reply_markup=my_markups.enter_page2)
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.sendmes = '1'
                u.save()
    elif message.text == 'üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
        personal_com(message)
    elif message.text == '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞':
        mk1 = types.InlineKeyboardMarkup()
        mk2 = types.InlineKeyboardMarkup()
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                if u.product_show == '1':
                    mkb = types.InlineKeyboardButton(text='üõç–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ', callback_data='pr_show_off')
                    mk1.add(mkb)
                    bot.send_message(message.chat.id, '–ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã?', reply_markup=mk1)
                elif u.product_show == '0':
                    mkb = types.InlineKeyboardButton(text='üõç–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –Ω–∞–ª–∏—á–∏–∏', callback_data='pr_show_on')
                    mk2.add(mkb)
                    bot.send_message(message.chat.id, '–ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤—Å–µ —Ç–æ–≤–∞—Ä—ã. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏?', reply_markup=mk2)
    elif message.text == 'üîè–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞':
        bot.send_message(message.chat.id, '–Ø –∑–∞–ø–æ–º–Ω—é –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä', reply_markup=my_markups.enter_page)
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.sendmes = '3'
                u.save()
    elif message.text == 'üêª–ú–∏—à–∫–∏' or message.text == '–ú–∏—à–∫–∏':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∏—à–∫–∏', reply_markup=my_markups.medved_page)
    elif message.text == 'üõí–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä':
        bot.send_message(message.chat.id, 'üõí–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä', reply_markup=my_markups.menu_page)
    elif message.text == 'üîÆ–†–∞–∑–Ω–æ–µ':
        smth_sended = 0
        for p in dbhelp.Product.select():
            if p.type == '3' and p.available != '0':
                bot.send_message(message.chat.id, '[üéÄ]({}){}, {} —Å–º., {} —Ä—É–±–ª–µ–π —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏'.format(p.link, p.name, p.size, p.price), parse_mode='markdown', reply_markup=check_available(p.available, p.theme))
                smth_sended = 1
        if smth_sended == 0:
            bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏üòî')
    elif message.text == 'üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                bot.send_message(message.chat.id, '–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {} \n–ò–∑–º–µ–Ω–∏—Ç—å?'.format(u.phone), reply_markup=my_markups.start_page)
    elif message.text == 'üõé–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        mk1 = types.InlineKeyboardMarkup()
        mk2 = types.InlineKeyboardMarkup()
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                if u.uvedl == '1':
                    mkb = types.InlineKeyboardButton(text='‚ùå–í—ã–∫–ª—é—á–∏—Ç—å', callback_data='uvedl_off')
                    mk1.add(mkb)
                    bot.send_message(message.chat.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, –≤—ã–∫–ª—é—á–∏—Ç—å?', reply_markup=mk1)
                elif u.uvedl == '0':
                    mkb = types.InlineKeyboardButton(text='‚úÖ–í–∫–ª—é—á–∏—Ç—å', callback_data='uvedl_on')
                    mk2.add(mkb)
                    bot.send_message(message.chat.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã, –≤–∫–ª—é—á–∏—Ç—å?', reply_markup=mk2)
    elif message.text == 'üõí–ö–æ—Ä–∑–∏–Ω–∞' or message.text == '–ö–æ—Ä–∑–∏–Ω–∞':
        bin_com(message)
    elif message.text == 'üóë–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.bin = 'none'
                u.total = '0'
                u.kolvo = '0'
                u.save()
                bot.send_message(message.chat.id, 'üóë–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', reply_markup=my_markups.bin_page)
    elif message.text == 'üéà–¢–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π' or message.text == '–°–∫–∏–¥–∫–∞':
        smth_sended = 0
        for p in dbhelp.Product.select():
            if p.type == '1' and p.sale != '0' and p.available != '0':
                bot.send_message(message.chat.id, '[üêª]({}){}, {} —Å–º., {} —Ä—É–±–ª–µ–π —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏'.format(p.link, p.name, p.size, p.price), parse_mode='markdown', reply_markup=check_available(p.available, p.theme))
                smth_sended = 1
        if smth_sended == 0:
            bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏üòî')
    elif message.text == 'üêª10-18 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤üêª':
        show_product('1', '1', message)
    elif message.text == 'üêª20 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤üêª':
        show_product('1', '2', message)
    elif message.text == 'üêª23-25 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤üêª':
        show_product('1', '3', message)
    elif message.text == 'üêª30 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤üêª':
        show_product('1', '4', message)
    elif message.text == 'üêª40-50 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤üêª':
        show_product('1', '5', message)
    elif message.text == 'üéÅ–ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ —É–ø–∞–∫–æ–≤–∫–∏' or message.text == '‚úÖ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å':
        product_show_set = 0
        for u in dbhelp.User.select():
            if str(u.cid) == str(message.chat.id):
                if u.product_show == '1':
                    product_show_set = 1
        for p in dbhelp.Product.select():
            if product_show_set == 1:
                if p.type == '2' and p.available != '0':
                    bot.send_message(message.chat.id, '[üéÅ]({}){} {} —Å–º., {} —Ä—É–±–ª–µ–π '.format(p.link, p.name, p.size, p.price), parse_mode='markdown', reply_markup=check_available(p.available, p.theme))
            else:
                if p.type == '2':
                    bot.send_message(message.chat.id, '[üéÅ]({}){} {} —Å–º., {} —Ä—É–±–ª–µ–π '.format(p.link, p.name, p.size, p.price), parse_mode='markdown', reply_markup=check_available(p.available, p.theme))

    elif message.text == 'üì¶–ó–∞–∫–∞–∑—ã' or message.text == '–ó–∞–∫–∞–∑—ã':
        smth_sended_orders = 0
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.orders = u.orders.split()
                n = len(u.orders)
                for i in range(n):
                    u.orders[i] = int(u.orders[i])
                for i in range(n):
                    for o in dbhelp.Order.select():
                        if str(u.orders[i]) == str(o.id):
                            if o.status == '0' or o.status == '1' or o.status == '2':
                                o.bin = o.bin.split()
                                s = len(o.bin)
                                for abc in range(s):
                                    o.bin[abc] = int(o.bin[abc])
                                for abcd in range(s):
                                    for p in dbhelp.Product.select():
                                        if str(o.bin[abcd]) == str(p.id):
                                            bot.send_message(message.chat.id, '[üêª]({}){}, {} —Å–º., {} —Ä—É–±–ª–µ–π'.format(p.link, p.name, p.size, p.price), parse_mode='markdown')
                                statusf = ''
                                if o.status == '0':
                                    statusf = '‚ö†Ô∏è–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
                                    mk2 = types.InlineKeyboardMarkup()
                                    mkb2 = types.InlineKeyboardButton(text='‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='or_canc_{}'.format(o.id))
                                    mk2.add(mkb2)
                                    bot.send_message(message.chat.id, '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {} —Ä—É–±–ª–µ–π\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {}\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–¥–µ–ª–∞–Ω –ø–æ –æ—à–∏–±–∫–µ'.format(o.total, statusf), reply_markup=mk2)
                                    smth_sended_orders = 1
                                elif o.status == '1':
                                    statusf = '‚ùï–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
                                    bot.send_message(message.chat.id, '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {} —Ä—É–±–ª–µ–π\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {}'.format(o.total, statusf))
                                    smth_sended_orders = 1
                                elif o.status == '2':
                                    statusf = '‚úÖ–ü–æ–ª—É—á–µ–Ω'
                                    mk2 = types.InlineKeyboardMarkup()
                                    mkb2 = types.InlineKeyboardButton(text='‚ùå–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏', callback_data='or_del_{}'.format(o.id))
                                    mk2.add(mkb2)
                                    bot.send_message(message.chat.id, '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {} —Ä—É–±–ª–µ–π\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {}\n\n–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏'.format(o.total, statusf), reply_markup=mk2)
                                    smth_sended_orders = 1
        if smth_sended_orders == 0:
            mk = types.InlineKeyboardMarkup()
            mkb = types.InlineKeyboardButton(text='üõí–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä', callback_data='go_to_menu')
            mk.add(mkb)
            bot.send_message(message.chat.id, 'üì¶–£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤', reply_markup=mk)
    elif message.text == 'üó≥–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                if u.bin != 'none':
                    abfc = int(u.kolvo) % 10
                    if abfc == 0 or abfc == 5 or abfc == 6 or abfc == 7 or abfc == 8 or abfc == 9:
                        u.tov = '—Ç–æ–≤–∞—Ä–æ–≤'
                    elif abfc == 1:
                        u.tov = '—Ç–æ–≤–∞—Ä'
                    elif abfc == 2 or abfc == 3 or abfc == 4:
                        u.tov = '—Ç–æ–≤–∞—Ä–∞'
                    u.doppredl = check_dop_predl(ccid)
                    if u.doppredl == '1':
                        bot.send_message(message.chat.id,'üì¶{} {} –Ω–∞ {} —Ä—É–±–ª–µ–π\n–í–≤–µ–¥–∏—Ç–µ/–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞, –¥–∞—Ç—ã –∏ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏(–∫—É—Ä—å–µ—Ä–æ–º/–ø—É–Ω–∫—Ç —Å–∞–º–æ–≤—ã–¥–∞—á–∏)'.format(u.kolvo, u.tov, u.total), reply_markup=my_markups.phone_page)
                        u.sendmes = '2'
                        u.save()
                    else:
                        bot.send_message(message.chat.id, '‚úåÔ∏è–Ø –∏–∑—É—á–∏–ª –∑–∞–∫–∞–∑ –∏ –ø—Ä–∏—à–µ–ª –∫ –≤—ã–≤–æ–¥—É, —á—Ç–æ –≤ –Ω–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ –≤–ø–∏—à—É—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã', reply_markup=my_markups.dop_predl_page)
                    u.save()
                else:
                    bot.send_message(message.chat.id, 'üó≥–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—É—Å—Ç–æ–π –∑–∞–∫–∞–∑, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É')
    elif message.text == 'üó≥–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                if u.bin != 'none':
                    if u.phone == 'none':
                        abfc = int(u.kolvo) % 10
                        if abfc == 0 or abfc == 5 or abfc == 6 or abfc == 7 or abfc == 8 or abfc == 9:
                            u.tov = '—Ç–æ–≤–∞—Ä–æ–≤'
                        elif abfc == 1:
                            u.tov = '—Ç–æ–≤–∞—Ä'
                        elif abfc == 2 or abfc == 3 or abfc == 4:
                            u.tov = '—Ç–æ–≤–∞—Ä–∞'
                        bot.send_message(message.chat.id, 'üì¶{} {} –Ω–∞ {} —Ä—É–±–ª–µ–π\n–í–≤–µ–¥–∏—Ç–µ/–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞, –¥–∞—Ç—ã –∏ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏(–∫—É—Ä—å–µ—Ä–æ–º/–ø—É–Ω–∫—Ç —Å–∞–º–æ–≤—ã–¥–∞—á–∏)'.format(u.kolvo, u.tov, u.total), reply_markup=my_markups.phone_page)
                        u.sendmes = '2'
                        u.save()
                    else:
                        bot.send_message(message.chat.id, 'üì±–í–≤–µ–¥–∏—Ç–µ/–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü–†–û–î–û–õ–ñ–ò–¢–¨, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç:  {}'.format(u.phone), reply_markup=my_markups.enter_phone_page)
                        u.sendmes = '2'
                        u.save()
                else:
                    bot.send_message(message.chat.id, 'üó≥–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—É—Å—Ç–æ–π –∑–∞–∫–∞–∑, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É')
    elif message.text == '‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                if u.bin != 'none':
                    fs = 0
                    for i in dbhelp.Order.select():
                        fs += 1
                    fccid = ''
                    fccid = str(ccid)+str(fs)
                    fccid = dbhelp.Order.create(id=fs, user=str(ccid), phone=u.phone, bin=u.bin, total=u.total, status='0', time='')
                    fccid.save()
                    bot.send_message(680180012, '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n–°—É–º–º–∞: {}, —Ç–æ–≤–∞—Ä—ã: {}, —Ç–µ–ª–µ—Ñ–æ–Ω: {}'.format(u.total, u.bin, u.phone))
                    u.bin = 'none'
                    u.total = '0'
                    u.kolvo = '0'
                    u.orders = str(u.orders) + str('{} '.format(fs))
                    u.save()
                    bot.send_message(message.chat.id, '‚úÖ–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É', reply_markup=my_markups.main_menu)
                else:
                    bot.send_message(message.chat.id, 'üó≥–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—É—Å—Ç–æ–π –∑–∞–∫–∞–∑, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É')
    elif enter_mes == 2:
        for u in dbhelp.User.select():
            if str(u.cid) == str(ccid):
                u.phone = message.text
                u.save()
                confirm_phone(ccid, message)
    elif message.text == '–ü—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id, '‚úåÔ∏è–ü—Ä–∏–≤–µ—Ç')
    elif ccid == 680180012:
        for u in dbhelp.User.select():
            if u.uvedl == '1':
                bot.send_message(int(u.cid), '{}'.format(message.text), parse_mode='markdown')
    else:
        comtxt = open('commands.txt', encoding='utf-8')
        bot.send_message(message.chat.id, 'üòü–ù–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º:\n\n{}\n\n'.format(comtxt.read()), reply_markup=my_markups.go_to_main_menu)


def check_available(a, b):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞
    mkup1 = types.InlineKeyboardMarkup()
    mkup2 = types.InlineKeyboardMarkup()
    mkbt1 = types.InlineKeyboardButton(text='‚úÖ–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=b)
    mkbt2 = types.InlineKeyboardButton(text='‚ùå–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏', callback_data='none')
    mkup1.add(mkbt1)
    mkup2.add(mkbt2)
    if a != '0':
        return mkup1
    else:
        return mkup2


def save_last_total(message):
    for u in dbhelp.User.select():
        if str(u.cid) == str(message.chat.id):
            u.last_total = str(int(message.message_id) - int(u.kolvo))
            u.save()


def show_product(product_type, size_type, message):  # –í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–∞
    product_show_set = 0
    for u in dbhelp.User.select():
        if str(u.cid) == str(message.chat.id):
            if u.product_show == '1':
                product_show_set = 1
    for p in dbhelp.Product.select():
        if product_show_set == 1:
            if p.type == product_type and p.size_type == size_type and p.available != '0':
                bot.send_message(message.chat.id, '[üêª]({}){}, {} —Å–º., {} —Ä—É–±–ª–µ–π'.format(p.link, p.name, p.size, p.price), parse_mode='markdown', reply_markup=check_available(p.available, p.theme))
        else:
            if p.type == product_type and p.size_type == size_type:
                bot.send_message(message.chat.id, '[üêª]({}){}, {} —Å–º., {} —Ä—É–±–ª–µ–π'.format(p.link, p.name, p.size, p.price), parse_mode='markdown', reply_markup=check_available(p.available, p.theme))


def check_dop_predl(ccid):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫–æ–π-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä
    for u in dbhelp.User.select():
        if str(u.cid) == str(ccid):
            u.bin = u.bin.split()
            n = len(u.bin)
            for i in range(n):
                u.bin[i] = int(u.bin[i])
            psps = 0
            for i in range(n):
                for p in dbhelp.Product.select():
                    if str(u.bin[i]) == str(p.id) and p.type == '2':
                        psps = 1
            if psps == 1:
                return '1'
            else:
                return '0'


@bot.message_handler(content_types=['sticker', 'pinned_message', 'photo', 'audio', 'document'])  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
def answer_not_a_text(message):
    comtxt = open('commands.txt', encoding='utf-8')
    bot.send_message(message.chat.id, 'üòü–ù–µ –º–æ–≥—É –Ω–∏–∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º:\n\n{}\n\n'.format(comtxt.read()), reply_markup=my_markups.go_to_main_menu)


while True:
    try:
        bot.polling(none_stop=True)

    except Exception as err:
        logging.error(err)
        time.sleep(5)
        print('Internet error')
